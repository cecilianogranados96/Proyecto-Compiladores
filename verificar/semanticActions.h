void save_type(void);
void process_literal(int literalType);
void process_id(void);
void initializeID (void);
void save_id(void);
void process_op(void);
void process_id(void);
void declaration_end(void);
void addTableContext(void);
void checkForDeclaredError(char *token, SemanticRecord* R);
void eval_binary(void);
int verifyIfCodeNeeded(DO_Data* op1, int operator, DO_Data* op2, SemanticRecord* dataType);
void getLiteralResult(DO_Data* op1, int operator, DO_Data* op2, SemanticRecord* dataType, int operand1, int operand2);
void pushNewSemanticRecordDO(int literalType, DO_Data *op, char* value);
void generateCode(char *instruction);
void initializeOutputFile(void);
void process_assign(void);
void start_function(void);
void end_function(void);
void process_function(void);
void call_functionNoParams(void);
void save_op(void);
void verify_id_for_Assign(void);
void complexAssign(int assignType, DO_Data* temp);
void writeCodeNeeded(DO_Data* op1, int operator, DO_Data* op2, SemanticRecord* dataType);
void eval_unary(void);
void writeUnaryCodeNeeded(DO_Data* op, int operator);
int verifyIfUnaryCodeNeeded(DO_Data* op, int operator);
void start_if(void);
void start_else(void);
void end_if(void);
void start_while(void);
void exit_while(void);
void evaluate_expression(void);
void start_doWhile(void);
void exit_doWhile(void);
void process_break(void);

void start_switch(void);
void end_switch(void);
void create_selector(void);
void begin_case(void);
void create_default(void);
void append_exit(void);
void save_comparator(void);
void end_case(void);

void begin_for(void); 
void redirect_code(void);  
void restore_code(void); 
void end_for(void); 

FILE *assembly;
